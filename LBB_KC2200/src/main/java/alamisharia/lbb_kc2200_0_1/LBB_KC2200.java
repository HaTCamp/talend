// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package alamisharia.lbb_kc2200_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: LBB_KC2200 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class LBB_KC2200 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(pgsql_hijra_dwh_AdditionalParams != null){
				
					this.setProperty("pgsql_hijra_dwh_AdditionalParams", pgsql_hijra_dwh_AdditionalParams.toString());
				
			}
			
			if(pgsql_hijra_dwh_Database != null){
				
					this.setProperty("pgsql_hijra_dwh_Database", pgsql_hijra_dwh_Database.toString());
				
			}
			
			if(pgsql_hijra_dwh_Login != null){
				
					this.setProperty("pgsql_hijra_dwh_Login", pgsql_hijra_dwh_Login.toString());
				
			}
			
			if(pgsql_hijra_dwh_Password != null){
				
					this.setProperty("pgsql_hijra_dwh_Password", pgsql_hijra_dwh_Password.toString());
				
			}
			
			if(pgsql_hijra_dwh_Port != null){
				
					this.setProperty("pgsql_hijra_dwh_Port", pgsql_hijra_dwh_Port.toString());
				
			}
			
			if(pgsql_hijra_dwh_Schema != null){
				
					this.setProperty("pgsql_hijra_dwh_Schema", pgsql_hijra_dwh_Schema.toString());
				
			}
			
			if(pgsql_hijra_dwh_Server != null){
				
					this.setProperty("pgsql_hijra_dwh_Server", pgsql_hijra_dwh_Server.toString());
				
			}
			
			if(pgsql_hijra_dwh_report_AdditionalParams != null){
				
					this.setProperty("pgsql_hijra_dwh_report_AdditionalParams", pgsql_hijra_dwh_report_AdditionalParams.toString());
				
			}
			
			if(pgsql_hijra_dwh_report_Database != null){
				
					this.setProperty("pgsql_hijra_dwh_report_Database", pgsql_hijra_dwh_report_Database.toString());
				
			}
			
			if(pgsql_hijra_dwh_report_Login != null){
				
					this.setProperty("pgsql_hijra_dwh_report_Login", pgsql_hijra_dwh_report_Login.toString());
				
			}
			
			if(pgsql_hijra_dwh_report_Password != null){
				
					this.setProperty("pgsql_hijra_dwh_report_Password", pgsql_hijra_dwh_report_Password.toString());
				
			}
			
			if(pgsql_hijra_dwh_report_Port != null){
				
					this.setProperty("pgsql_hijra_dwh_report_Port", pgsql_hijra_dwh_report_Port.toString());
				
			}
			
			if(pgsql_hijra_dwh_report_Schema != null){
				
					this.setProperty("pgsql_hijra_dwh_report_Schema", pgsql_hijra_dwh_report_Schema.toString());
				
			}
			
			if(pgsql_hijra_dwh_report_Server != null){
				
					this.setProperty("pgsql_hijra_dwh_report_Server", pgsql_hijra_dwh_report_Server.toString());
				
			}
			
		}

public String pgsql_hijra_dwh_AdditionalParams;
public String getPgsql_hijra_dwh_AdditionalParams(){
	return this.pgsql_hijra_dwh_AdditionalParams;
}
public String pgsql_hijra_dwh_Database;
public String getPgsql_hijra_dwh_Database(){
	return this.pgsql_hijra_dwh_Database;
}
public String pgsql_hijra_dwh_Login;
public String getPgsql_hijra_dwh_Login(){
	return this.pgsql_hijra_dwh_Login;
}
public java.lang.String pgsql_hijra_dwh_Password;
public java.lang.String getPgsql_hijra_dwh_Password(){
	return this.pgsql_hijra_dwh_Password;
}
public String pgsql_hijra_dwh_Port;
public String getPgsql_hijra_dwh_Port(){
	return this.pgsql_hijra_dwh_Port;
}
public String pgsql_hijra_dwh_Schema;
public String getPgsql_hijra_dwh_Schema(){
	return this.pgsql_hijra_dwh_Schema;
}
public String pgsql_hijra_dwh_Server;
public String getPgsql_hijra_dwh_Server(){
	return this.pgsql_hijra_dwh_Server;
}
public String pgsql_hijra_dwh_report_AdditionalParams;
public String getPgsql_hijra_dwh_report_AdditionalParams(){
	return this.pgsql_hijra_dwh_report_AdditionalParams;
}
public String pgsql_hijra_dwh_report_Database;
public String getPgsql_hijra_dwh_report_Database(){
	return this.pgsql_hijra_dwh_report_Database;
}
public String pgsql_hijra_dwh_report_Login;
public String getPgsql_hijra_dwh_report_Login(){
	return this.pgsql_hijra_dwh_report_Login;
}
public java.lang.String pgsql_hijra_dwh_report_Password;
public java.lang.String getPgsql_hijra_dwh_report_Password(){
	return this.pgsql_hijra_dwh_report_Password;
}
public String pgsql_hijra_dwh_report_Port;
public String getPgsql_hijra_dwh_report_Port(){
	return this.pgsql_hijra_dwh_report_Port;
}
public String pgsql_hijra_dwh_report_Schema;
public String getPgsql_hijra_dwh_report_Schema(){
	return this.pgsql_hijra_dwh_report_Schema;
}
public String pgsql_hijra_dwh_report_Server;
public String getPgsql_hijra_dwh_report_Server(){
	return this.pgsql_hijra_dwh_report_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "LBB_KC2200";
	private final String projectName = "ALAMISHARIA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				LBB_KC2200.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(LBB_KC2200.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_ALAMISHARIA_LBB_KC2200 = new byte[0];
    static byte[] commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[0];

	
			    public String sandi_kc;

				public String getSandi_kc () {
					return this.sandi_kc;
				}
				
			    public String nomor_cif;

				public String getNomor_cif () {
					return this.nomor_cif;
				}
				
			    public String golongan_nasabah;

				public String getGolongan_nasabah () {
					return this.golongan_nasabah;
				}
				
			    public String hubungan_dengan_bank;

				public String getHubungan_dengan_bank () {
					return this.hubungan_dengan_bank;
				}
				
			    public String nomor_rekening;

				public String getNomor_rekening () {
					return this.nomor_rekening;
				}
				
			    public String sifat_dana;

				public String getSifat_dana () {
					return this.sifat_dana;
				}
				
			    public java.util.Date tanggal_mulai;

				public java.util.Date getTanggal_mulai () {
					return this.tanggal_mulai;
				}
				
			    public String lokasi_kantor;

				public String getLokasi_kantor () {
					return this.lokasi_kantor;
				}
				
			    public Double persen_imbalan;

				public Double getPersen_imbalan () {
					return this.persen_imbalan;
				}
				
			    public Double jumlah;

				public Double getJumlah () {
					return this.jumlah;
				}
				
			    public Double nominal_yang_diblokir;

				public Double getNominal_yang_diblokir () {
					return this.nominal_yang_diblokir;
				}
				
			    public Double alasan_blokir;

				public Double getAlasan_blokir () {
					return this.alasan_blokir;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ALAMISHARIA_LBB_KC2200.length) {
				if(length < 1024 && commonByteArray_ALAMISHARIA_LBB_KC2200.length == 0) {
   					commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[1024];
				} else {
   					commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ALAMISHARIA_LBB_KC2200, 0, length);
			strReturn = new String(commonByteArray_ALAMISHARIA_LBB_KC2200, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ALAMISHARIA_LBB_KC2200) {

        	try {

        		int length = 0;
		
					this.sandi_kc = readString(dis);
					
					this.nomor_cif = readString(dis);
					
					this.golongan_nasabah = readString(dis);
					
					this.hubungan_dengan_bank = readString(dis);
					
					this.nomor_rekening = readString(dis);
					
					this.sifat_dana = readString(dis);
					
					this.tanggal_mulai = readDate(dis);
					
					this.lokasi_kantor = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.persen_imbalan = null;
           				} else {
           			    	this.persen_imbalan = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.jumlah = null;
           				} else {
           			    	this.jumlah = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nominal_yang_diblokir = null;
           				} else {
           			    	this.nominal_yang_diblokir = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.alasan_blokir = null;
           				} else {
           			    	this.alasan_blokir = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.sandi_kc,dos);
					
					// String
				
						writeString(this.nomor_cif,dos);
					
					// String
				
						writeString(this.golongan_nasabah,dos);
					
					// String
				
						writeString(this.hubungan_dengan_bank,dos);
					
					// String
				
						writeString(this.nomor_rekening,dos);
					
					// String
				
						writeString(this.sifat_dana,dos);
					
					// java.util.Date
				
						writeDate(this.tanggal_mulai,dos);
					
					// String
				
						writeString(this.lokasi_kantor,dos);
					
					// Double
				
						if(this.persen_imbalan == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.persen_imbalan);
		            	}
					
					// Double
				
						if(this.jumlah == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.jumlah);
		            	}
					
					// Double
				
						if(this.nominal_yang_diblokir == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.nominal_yang_diblokir);
		            	}
					
					// Double
				
						if(this.alasan_blokir == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.alasan_blokir);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("sandi_kc="+sandi_kc);
		sb.append(",nomor_cif="+nomor_cif);
		sb.append(",golongan_nasabah="+golongan_nasabah);
		sb.append(",hubungan_dengan_bank="+hubungan_dengan_bank);
		sb.append(",nomor_rekening="+nomor_rekening);
		sb.append(",sifat_dana="+sifat_dana);
		sb.append(",tanggal_mulai="+String.valueOf(tanggal_mulai));
		sb.append(",lokasi_kantor="+lokasi_kantor);
		sb.append(",persen_imbalan="+String.valueOf(persen_imbalan));
		sb.append(",jumlah="+String.valueOf(jumlah));
		sb.append(",nominal_yang_diblokir="+String.valueOf(nominal_yang_diblokir));
		sb.append(",alasan_blokir="+String.valueOf(alasan_blokir));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_ALAMISHARIA_LBB_KC2200 = new byte[0];
    static byte[] commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[0];

	
			    public String flag_detail;

				public String getFlag_detail () {
					return this.flag_detail;
				}
				
			    public String sandi_kc;

				public String getSandi_kc () {
					return this.sandi_kc;
				}
				
			    public String cif;

				public String getCif () {
					return this.cif;
				}
				
			    public String golongan_nasabah;

				public String getGolongan_nasabah () {
					return this.golongan_nasabah;
				}
				
			    public String hub_dg_bank;

				public String getHub_dg_bank () {
					return this.hub_dg_bank;
				}
				
			    public String nomor_rekening;

				public String getNomor_rekening () {
					return this.nomor_rekening;
				}
				
			    public String sifat_dana;

				public String getSifat_dana () {
					return this.sifat_dana;
				}
				
			    public java.util.Date tgl_mulai;

				public java.util.Date getTgl_mulai () {
					return this.tgl_mulai;
				}
				
			    public String lokasi_kantor;

				public String getLokasi_kantor () {
					return this.lokasi_kantor;
				}
				
			    public Double persen_imbalan;

				public Double getPersen_imbalan () {
					return this.persen_imbalan;
				}
				
			    public Double jml;

				public Double getJml () {
					return this.jml;
				}
				
			    public Double jml_yang_di_blokir;

				public Double getJml_yang_di_blokir () {
					return this.jml_yang_di_blokir;
				}
				
			    public Double alasan_diblokir;

				public Double getAlasan_diblokir () {
					return this.alasan_diblokir;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ALAMISHARIA_LBB_KC2200.length) {
				if(length < 1024 && commonByteArray_ALAMISHARIA_LBB_KC2200.length == 0) {
   					commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[1024];
				} else {
   					commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ALAMISHARIA_LBB_KC2200, 0, length);
			strReturn = new String(commonByteArray_ALAMISHARIA_LBB_KC2200, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ALAMISHARIA_LBB_KC2200) {

        	try {

        		int length = 0;
		
					this.flag_detail = readString(dis);
					
					this.sandi_kc = readString(dis);
					
					this.cif = readString(dis);
					
					this.golongan_nasabah = readString(dis);
					
					this.hub_dg_bank = readString(dis);
					
					this.nomor_rekening = readString(dis);
					
					this.sifat_dana = readString(dis);
					
					this.tgl_mulai = readDate(dis);
					
					this.lokasi_kantor = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.persen_imbalan = null;
           				} else {
           			    	this.persen_imbalan = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.jml = null;
           				} else {
           			    	this.jml = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.jml_yang_di_blokir = null;
           				} else {
           			    	this.jml_yang_di_blokir = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.alasan_diblokir = null;
           				} else {
           			    	this.alasan_diblokir = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flag_detail,dos);
					
					// String
				
						writeString(this.sandi_kc,dos);
					
					// String
				
						writeString(this.cif,dos);
					
					// String
				
						writeString(this.golongan_nasabah,dos);
					
					// String
				
						writeString(this.hub_dg_bank,dos);
					
					// String
				
						writeString(this.nomor_rekening,dos);
					
					// String
				
						writeString(this.sifat_dana,dos);
					
					// java.util.Date
				
						writeDate(this.tgl_mulai,dos);
					
					// String
				
						writeString(this.lokasi_kantor,dos);
					
					// Double
				
						if(this.persen_imbalan == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.persen_imbalan);
		            	}
					
					// Double
				
						if(this.jml == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.jml);
		            	}
					
					// Double
				
						if(this.jml_yang_di_blokir == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.jml_yang_di_blokir);
		            	}
					
					// Double
				
						if(this.alasan_diblokir == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.alasan_diblokir);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flag_detail="+flag_detail);
		sb.append(",sandi_kc="+sandi_kc);
		sb.append(",cif="+cif);
		sb.append(",golongan_nasabah="+golongan_nasabah);
		sb.append(",hub_dg_bank="+hub_dg_bank);
		sb.append(",nomor_rekening="+nomor_rekening);
		sb.append(",sifat_dana="+sifat_dana);
		sb.append(",tgl_mulai="+String.valueOf(tgl_mulai));
		sb.append(",lokasi_kantor="+lokasi_kantor);
		sb.append(",persen_imbalan="+String.valueOf(persen_imbalan));
		sb.append(",jml="+String.valueOf(jml));
		sb.append(",jml_yang_di_blokir="+String.valueOf(jml_yang_di_blokir));
		sb.append(",alasan_diblokir="+String.valueOf(alasan_diblokir));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ALAMISHARIA_LBB_KC2200 = new byte[0];
    static byte[] commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[0];

	
			    public String flag_detail;

				public String getFlag_detail () {
					return this.flag_detail;
				}
				
			    public String sandi_kc;

				public String getSandi_kc () {
					return this.sandi_kc;
				}
				
			    public String cif;

				public String getCif () {
					return this.cif;
				}
				
			    public String golongan_nasabah;

				public String getGolongan_nasabah () {
					return this.golongan_nasabah;
				}
				
			    public String hub_dg_bank;

				public String getHub_dg_bank () {
					return this.hub_dg_bank;
				}
				
			    public String nomor_rekening;

				public String getNomor_rekening () {
					return this.nomor_rekening;
				}
				
			    public String sifat_dana;

				public String getSifat_dana () {
					return this.sifat_dana;
				}
				
			    public java.util.Date tgl_mulai;

				public java.util.Date getTgl_mulai () {
					return this.tgl_mulai;
				}
				
			    public String lokasi_kantor;

				public String getLokasi_kantor () {
					return this.lokasi_kantor;
				}
				
			    public Double persen_imbalan;

				public Double getPersen_imbalan () {
					return this.persen_imbalan;
				}
				
			    public Double jml;

				public Double getJml () {
					return this.jml;
				}
				
			    public Double jml_yang_di_blokir;

				public Double getJml_yang_di_blokir () {
					return this.jml_yang_di_blokir;
				}
				
			    public Double alasan_diblokir;

				public Double getAlasan_diblokir () {
					return this.alasan_diblokir;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ALAMISHARIA_LBB_KC2200.length) {
				if(length < 1024 && commonByteArray_ALAMISHARIA_LBB_KC2200.length == 0) {
   					commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[1024];
				} else {
   					commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ALAMISHARIA_LBB_KC2200, 0, length);
			strReturn = new String(commonByteArray_ALAMISHARIA_LBB_KC2200, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ALAMISHARIA_LBB_KC2200) {

        	try {

        		int length = 0;
		
					this.flag_detail = readString(dis);
					
					this.sandi_kc = readString(dis);
					
					this.cif = readString(dis);
					
					this.golongan_nasabah = readString(dis);
					
					this.hub_dg_bank = readString(dis);
					
					this.nomor_rekening = readString(dis);
					
					this.sifat_dana = readString(dis);
					
					this.tgl_mulai = readDate(dis);
					
					this.lokasi_kantor = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.persen_imbalan = null;
           				} else {
           			    	this.persen_imbalan = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.jml = null;
           				} else {
           			    	this.jml = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.jml_yang_di_blokir = null;
           				} else {
           			    	this.jml_yang_di_blokir = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.alasan_diblokir = null;
           				} else {
           			    	this.alasan_diblokir = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flag_detail,dos);
					
					// String
				
						writeString(this.sandi_kc,dos);
					
					// String
				
						writeString(this.cif,dos);
					
					// String
				
						writeString(this.golongan_nasabah,dos);
					
					// String
				
						writeString(this.hub_dg_bank,dos);
					
					// String
				
						writeString(this.nomor_rekening,dos);
					
					// String
				
						writeString(this.sifat_dana,dos);
					
					// java.util.Date
				
						writeDate(this.tgl_mulai,dos);
					
					// String
				
						writeString(this.lokasi_kantor,dos);
					
					// Double
				
						if(this.persen_imbalan == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.persen_imbalan);
		            	}
					
					// Double
				
						if(this.jml == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.jml);
		            	}
					
					// Double
				
						if(this.jml_yang_di_blokir == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.jml_yang_di_blokir);
		            	}
					
					// Double
				
						if(this.alasan_diblokir == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.alasan_diblokir);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flag_detail="+flag_detail);
		sb.append(",sandi_kc="+sandi_kc);
		sb.append(",cif="+cif);
		sb.append(",golongan_nasabah="+golongan_nasabah);
		sb.append(",hub_dg_bank="+hub_dg_bank);
		sb.append(",nomor_rekening="+nomor_rekening);
		sb.append(",sifat_dana="+sifat_dana);
		sb.append(",tgl_mulai="+String.valueOf(tgl_mulai));
		sb.append(",lokasi_kantor="+lokasi_kantor);
		sb.append(",persen_imbalan="+String.valueOf(persen_imbalan));
		sb.append(",jml="+String.valueOf(jml));
		sb.append(",jml_yang_di_blokir="+String.valueOf(jml_yang_di_blokir));
		sb.append(",alasan_diblokir="+String.valueOf(alasan_diblokir));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ALAMISHARIA_LBB_KC2200 = new byte[0];
    static byte[] commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[0];

	
			    public String flag_detail;

				public String getFlag_detail () {
					return this.flag_detail;
				}
				
			    public String sandi_kc;

				public String getSandi_kc () {
					return this.sandi_kc;
				}
				
			    public String cif;

				public String getCif () {
					return this.cif;
				}
				
			    public String golongan_nasabah;

				public String getGolongan_nasabah () {
					return this.golongan_nasabah;
				}
				
			    public String hub_dg_bank;

				public String getHub_dg_bank () {
					return this.hub_dg_bank;
				}
				
			    public String nomor_rekening;

				public String getNomor_rekening () {
					return this.nomor_rekening;
				}
				
			    public String sifat_dana;

				public String getSifat_dana () {
					return this.sifat_dana;
				}
				
			    public java.util.Date tgl_mulai;

				public java.util.Date getTgl_mulai () {
					return this.tgl_mulai;
				}
				
			    public String lokasi_kantor;

				public String getLokasi_kantor () {
					return this.lokasi_kantor;
				}
				
			    public Double persen_imbalan;

				public Double getPersen_imbalan () {
					return this.persen_imbalan;
				}
				
			    public Double jml;

				public Double getJml () {
					return this.jml;
				}
				
			    public Double jml_yang_di_blokir;

				public Double getJml_yang_di_blokir () {
					return this.jml_yang_di_blokir;
				}
				
			    public Double alasan_diblokir;

				public Double getAlasan_diblokir () {
					return this.alasan_diblokir;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ALAMISHARIA_LBB_KC2200.length) {
				if(length < 1024 && commonByteArray_ALAMISHARIA_LBB_KC2200.length == 0) {
   					commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[1024];
				} else {
   					commonByteArray_ALAMISHARIA_LBB_KC2200 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ALAMISHARIA_LBB_KC2200, 0, length);
			strReturn = new String(commonByteArray_ALAMISHARIA_LBB_KC2200, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ALAMISHARIA_LBB_KC2200) {

        	try {

        		int length = 0;
		
					this.flag_detail = readString(dis);
					
					this.sandi_kc = readString(dis);
					
					this.cif = readString(dis);
					
					this.golongan_nasabah = readString(dis);
					
					this.hub_dg_bank = readString(dis);
					
					this.nomor_rekening = readString(dis);
					
					this.sifat_dana = readString(dis);
					
					this.tgl_mulai = readDate(dis);
					
					this.lokasi_kantor = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.persen_imbalan = null;
           				} else {
           			    	this.persen_imbalan = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.jml = null;
           				} else {
           			    	this.jml = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.jml_yang_di_blokir = null;
           				} else {
           			    	this.jml_yang_di_blokir = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.alasan_diblokir = null;
           				} else {
           			    	this.alasan_diblokir = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flag_detail,dos);
					
					// String
				
						writeString(this.sandi_kc,dos);
					
					// String
				
						writeString(this.cif,dos);
					
					// String
				
						writeString(this.golongan_nasabah,dos);
					
					// String
				
						writeString(this.hub_dg_bank,dos);
					
					// String
				
						writeString(this.nomor_rekening,dos);
					
					// String
				
						writeString(this.sifat_dana,dos);
					
					// java.util.Date
				
						writeDate(this.tgl_mulai,dos);
					
					// String
				
						writeString(this.lokasi_kantor,dos);
					
					// Double
				
						if(this.persen_imbalan == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.persen_imbalan);
		            	}
					
					// Double
				
						if(this.jml == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.jml);
		            	}
					
					// Double
				
						if(this.jml_yang_di_blokir == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.jml_yang_di_blokir);
		            	}
					
					// Double
				
						if(this.alasan_diblokir == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.alasan_diblokir);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flag_detail="+flag_detail);
		sb.append(",sandi_kc="+sandi_kc);
		sb.append(",cif="+cif);
		sb.append(",golongan_nasabah="+golongan_nasabah);
		sb.append(",hub_dg_bank="+hub_dg_bank);
		sb.append(",nomor_rekening="+nomor_rekening);
		sb.append(",sifat_dana="+sifat_dana);
		sb.append(",tgl_mulai="+String.valueOf(tgl_mulai));
		sb.append(",lokasi_kantor="+lokasi_kantor);
		sb.append(",persen_imbalan="+String.valueOf(persen_imbalan));
		sb.append(",jml="+String.valueOf(jml));
		sb.append(",jml_yang_di_blokir="+String.valueOf(jml_yang_di_blokir));
		sb.append(",alasan_diblokir="+String.valueOf(alasan_diblokir));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
out2Struct out2 = new out2Struct();






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.pgsql_hijra_dwh_report_Schema;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("lbbprs_form_kc2200");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("lbbprs_form_kc2200");
}

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.pgsql_hijra_dwh_report_Server+":"+context.pgsql_hijra_dwh_report_Port+"/"+context.pgsql_hijra_dwh_report_Database + "?" + context.pgsql_hijra_dwh_report_AdditionalParams;
    dbUser_tDBOutput_1 = context.pgsql_hijra_dwh_report_Login;

	final String decryptedPassword_tDBOutput_1 = context.pgsql_hijra_dwh_report_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                boolean whetherExist_tDBOutput_1 = false;
                                try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null, new String[]{"TABLE"})) {
                                    String defaultSchema_tDBOutput_1 = "public";
                                    if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
                                        try(java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
                                            java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1.executeQuery("select current_schema() ")) {
                                            while(rsSchema_tDBOutput_1.next()){
                                                defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
                                            }
                                        }
                                    }
                                    while(rsTable_tDBOutput_1.next()) {
                                        String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                        String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
                                        if(table_tDBOutput_1.equals(("lbbprs_form_kc2200"))
                                            && (schema_tDBOutput_1.equals(dbschema_tDBOutput_1) || ((dbschema_tDBOutput_1 ==null || dbschema_tDBOutput_1.trim().length() ==0) && defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
                                            whetherExist_tDBOutput_1 = true;
                                            break;
                                        }
                                    }
                                }
                                if(whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtDrop_tDBOutput_1.execute("DROP TABLE \"" + tableName_tDBOutput_1 + "\"" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1 + "\"(\"sandi_kc\" VARCHAR(255)  ,\"nomor_cif\" VARCHAR(255)  ,\"golongan_nasabah\" VARCHAR(255)  ,\"hubungan_dengan_bank\" VARCHAR(255)  ,\"nomor_rekening\" VARCHAR(255)  ,\"sifat_dana\" VARCHAR(255)  ,\"tanggal_mulai\" TIMESTAMP(255)  ,\"lokasi_kantor\" VARCHAR(255)  ,\"persen_imbalan\" FLOAT8 ,\"jumlah\" NUMERIC(19,2)  ,\"nominal_yang_diblokir\" NUMERIC(19,2)  ,\"alasan_blokir\" NUMERIC(19,2)  )");
                                }
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"sandi_kc\",\"nomor_cif\",\"golongan_nasabah\",\"hubungan_dengan_bank\",\"nomor_rekening\",\"sifat_dana\",\"tanggal_mulai\",\"lokasi_kantor\",\"persen_imbalan\",\"jumlah\",\"nominal_yang_diblokir\",\"alasan_blokir\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[13];

        public void addRow(String[] row) {

            for (int i = 0; i < 13; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 12 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 12 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[12] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"flag_detail","sandi_kc","cif","golongan_nasabah","hub_dg_bank","nomor_rekening","sifat_dana","tgl_mulai","lokasi_kantor","persen_imbalan","jml","jml_yang_di_blokir","alasan_diblokir",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tConvertType_1 = 0;
		
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.pgsql_hijra_dwh_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.pgsql_hijra_dwh_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + context.pgsql_hijra_dwh_Server + ":" + context.pgsql_hijra_dwh_Port + "/" + context.pgsql_hijra_dwh_Database + "?" + context.pgsql_hijra_dwh_AdditionalParams;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\nselect 'D01' as flag_detail,'001' as sandi_kc,a.cif as cif,c.goldeb_lbb as golongan_nasabah,\ncase \n	when a.golongan"
+"_debitur ='1' then '1 (terkait dengan bank)'\n	when a.golongan_debitur ='2' then '2 (tidak terkait dengan bank)'\n	else "
+"null\nend as hub_dg_bank,a.nomor_rekening,\n'1 (dapat ditarik sewaktu-waktu)' as sifat_dana,a.creation_date as tgl_mulai"
+",c.location_id as lokasi_kantor, b.pro1  as persen_imbalan,a.available_balance as jml,null as jml_yang_di_blokir,null as"
+" alasan_diblokir\n from hijra_account as a\ninner join bngtab as b on a.interest_code=b.kodebng  \ninner join hijra_cust"
+"omer as c on a.cif=c.cif \nwhere left(nomor_rekening,3)= '302' order by a.nomor_rekening\n";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.flag_detail = null;
							} else {
	                         		
        	row2.flag_detail = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.sandi_kc = null;
							} else {
	                         		
        	row2.sandi_kc = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.cif = null;
							} else {
	                         		
        	row2.cif = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.golongan_nasabah = null;
							} else {
	                         		
        	row2.golongan_nasabah = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.hub_dg_bank = null;
							} else {
	                         		
        	row2.hub_dg_bank = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.nomor_rekening = null;
							} else {
	                         		
        	row2.nomor_rekening = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.sifat_dana = null;
							} else {
	                         		
        	row2.sifat_dana = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row2.tgl_mulai = null;
							} else {
										
			row2.tgl_mulai = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 8);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row2.lokasi_kantor = null;
							} else {
	                         		
        	row2.lokasi_kantor = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row2.persen_imbalan = null;
							} else {
	                         		
            row2.persen_imbalan = rs_tDBInput_2.getDouble(10);
            if(rs_tDBInput_2.wasNull()){
                    row2.persen_imbalan = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row2.jml = null;
							} else {
	                         		
            row2.jml = rs_tDBInput_2.getDouble(11);
            if(rs_tDBInput_2.wasNull()){
                    row2.jml = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row2.jml_yang_di_blokir = null;
							} else {
	                         		
            row2.jml_yang_di_blokir = rs_tDBInput_2.getDouble(12);
            if(rs_tDBInput_2.wasNull()){
                    row2.jml_yang_di_blokir = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row2.alasan_diblokir = null;
							} else {
	                         		
            row2.alasan_diblokir = rs_tDBInput_2.getDouble(13);
            if(rs_tDBInput_2.wasNull()){
                    row2.alasan_diblokir = null;
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


  row1 = new row1Struct();
  boolean bHasError_tConvertType_1 = false;       
      try {
          row1.flag_detail = TypeConvert.String2String(row2.flag_detail);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.sandi_kc = TypeConvert.String2String(row2.sandi_kc);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.cif = TypeConvert.String2String(row2.cif);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.golongan_nasabah = TypeConvert.String2String(row2.golongan_nasabah);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.hub_dg_bank = TypeConvert.String2String(row2.hub_dg_bank);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.nomor_rekening = TypeConvert.String2String(row2.nomor_rekening);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.sifat_dana = TypeConvert.String2String(row2.sifat_dana);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.tgl_mulai = TypeConvert.Date2Date(row2.tgl_mulai);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.lokasi_kantor = TypeConvert.String2String(row2.lokasi_kantor);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.persen_imbalan = TypeConvert.Double2Double(row2.persen_imbalan);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.jml = TypeConvert.Double2Double(row2.jml);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.jml_yang_di_blokir = TypeConvert.Double2Double(row2.jml_yang_di_blokir);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }     
      try {
          row1.alasan_diblokir = TypeConvert.Double2Double(row2.alasan_diblokir);
      } catch (java.lang.Exception e){
        bHasError_tConvertType_1 = true;        
          System.err.println(e.getMessage());          
      }
      if (bHasError_tConvertType_1) { row1 = null;}

  nb_line_tConvertType_1 ++ ;
 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;
out2 = null;


// # Output table : 'out1'
out1_tmp.sandi_kc = row2.sandi_kc;
out1_tmp.nomor_cif = row2.cif ;
out1_tmp.golongan_nasabah = row2.golongan_nasabah;
out1_tmp.hubungan_dengan_bank = row2.hub_dg_bank ;
out1_tmp.nomor_rekening = row2.nomor_rekening;
out1_tmp.sifat_dana = row2.sifat_dana;
out1_tmp.tanggal_mulai = row2.tgl_mulai ;
out1_tmp.lokasi_kantor = row2.lokasi_kantor;
out1_tmp.persen_imbalan = row1.persen_imbalan ;
out1_tmp.jumlah = row2.jml ;
out1_tmp.nominal_yang_diblokir = row2.jml_yang_di_blokir ;
out1_tmp.alasan_blokir = row2.alasan_diblokir ;
out1 = out1_tmp;

// # Output table : 'out2'
out2_tmp.flag_detail = row1.flag_detail ;
out2_tmp.sandi_kc = row1.sandi_kc ;
out2_tmp.cif = row1.cif ;
out2_tmp.golongan_nasabah = row1.golongan_nasabah ;
out2_tmp.hub_dg_bank = row1.hub_dg_bank ;
out2_tmp.nomor_rekening = row1.nomor_rekening ;
out2_tmp.sifat_dana = row1.sifat_dana ;
out2_tmp.tgl_mulai = row1.tgl_mulai ;
out2_tmp.lokasi_kantor = row1.lokasi_kantor ;
out2_tmp.persen_imbalan = row1.persen_imbalan ;
out2_tmp.jml = row1.jml ;
out2_tmp.jml_yang_di_blokir = row1.jml_yang_di_blokir ;
out2_tmp.alasan_diblokir = row1.alasan_diblokir ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(out1.sandi_kc == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, out1.sandi_kc);
}

                    if(out1.nomor_cif == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, out1.nomor_cif);
}

                    if(out1.golongan_nasabah == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, out1.golongan_nasabah);
}

                    if(out1.hubungan_dengan_bank == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, out1.hubungan_dengan_bank);
}

                    if(out1.nomor_rekening == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, out1.nomor_rekening);
}

                    if(out1.sifat_dana == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, out1.sifat_dana);
}

                    if(out1.tanggal_mulai != null) {
pstmt_tDBOutput_1.setTimestamp(7, new java.sql.Timestamp(out1.tanggal_mulai.getTime()));
} else {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(out1.lokasi_kantor == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, out1.lokasi_kantor);
}

                    if(out1.persen_imbalan == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(9, out1.persen_imbalan);
}

                    if(out1.jumlah == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(10, out1.jumlah);
}

                    if(out1.nominal_yang_diblokir == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(11, out1.nominal_yang_diblokir);
}

                    if(out1.alasan_blokir == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(12, out1.alasan_blokir);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                	conn_tDBOutput_1.commit();
                	
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[13];
   				
	    		if(out2.flag_detail != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(out2.flag_detail)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.sandi_kc != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(out2.sandi_kc)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.cif != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(out2.cif)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.golongan_nasabah != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(out2.golongan_nasabah)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.hub_dg_bank != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(out2.hub_dg_bank)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.nomor_rekening != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(out2.nomor_rekening)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.sifat_dana != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(out2.sifat_dana)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.tgl_mulai != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(out2.tgl_mulai)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.lokasi_kantor != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(out2.lokasi_kantor)			
					          ;	
							
	    		} //			
    			   				
	    		if(out2.persen_imbalan != null) { //              
                 row_tLogRow_1[9]=    						
								FormatterUtils.formatUnwithE(out2.persen_imbalan)
					          ;	
							
	    		} //			
    			   				
	    		if(out2.jml != null) { //              
                 row_tLogRow_1[10]=    						
								FormatterUtils.formatUnwithE(out2.jml)
					          ;	
							
	    		} //			
    			   				
	    		if(out2.jml_yang_di_blokir != null) { //              
                 row_tLogRow_1[11]=    						
								FormatterUtils.formatUnwithE(out2.jml_yang_di_blokir)
					          ;	
							
	    		} //			
    			   				
	    		if(out2.alasan_diblokir != null) { //              
                 row_tLogRow_1[12]=    						
								FormatterUtils.formatUnwithE(out2.alasan_diblokir)
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			
			conn_tDBOutput_1.commit();
			
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */




	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";

	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */




	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Dev";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final LBB_KC2200 LBB_KC2200Class = new LBB_KC2200();

        int exitCode = LBB_KC2200Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = LBB_KC2200.class.getClassLoader().getResourceAsStream("alamisharia/lbb_kc2200_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = LBB_KC2200.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("pgsql_hijra_dwh_AdditionalParams", "id_String");
                            context.pgsql_hijra_dwh_AdditionalParams=(String) context.getProperty("pgsql_hijra_dwh_AdditionalParams");
                        context.setContextType("pgsql_hijra_dwh_Database", "id_String");
                            context.pgsql_hijra_dwh_Database=(String) context.getProperty("pgsql_hijra_dwh_Database");
                        context.setContextType("pgsql_hijra_dwh_Login", "id_String");
                            context.pgsql_hijra_dwh_Login=(String) context.getProperty("pgsql_hijra_dwh_Login");
                        context.setContextType("pgsql_hijra_dwh_Password", "id_Password");
                            String pwd_pgsql_hijra_dwh_Password_value = context.getProperty("pgsql_hijra_dwh_Password");
                            context.pgsql_hijra_dwh_Password = null;
                            if(pwd_pgsql_hijra_dwh_Password_value!=null) {
                                if(context_param.containsKey("pgsql_hijra_dwh_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.pgsql_hijra_dwh_Password = pwd_pgsql_hijra_dwh_Password_value;
                                } else if (!pwd_pgsql_hijra_dwh_Password_value.isEmpty()) {
                                    try {
                                        context.pgsql_hijra_dwh_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_pgsql_hijra_dwh_Password_value);
                                        context.put("pgsql_hijra_dwh_Password",context.pgsql_hijra_dwh_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("pgsql_hijra_dwh_Port", "id_String");
                            context.pgsql_hijra_dwh_Port=(String) context.getProperty("pgsql_hijra_dwh_Port");
                        context.setContextType("pgsql_hijra_dwh_Schema", "id_String");
                            context.pgsql_hijra_dwh_Schema=(String) context.getProperty("pgsql_hijra_dwh_Schema");
                        context.setContextType("pgsql_hijra_dwh_Server", "id_String");
                            context.pgsql_hijra_dwh_Server=(String) context.getProperty("pgsql_hijra_dwh_Server");
                        context.setContextType("pgsql_hijra_dwh_report_AdditionalParams", "id_String");
                            context.pgsql_hijra_dwh_report_AdditionalParams=(String) context.getProperty("pgsql_hijra_dwh_report_AdditionalParams");
                        context.setContextType("pgsql_hijra_dwh_report_Database", "id_String");
                            context.pgsql_hijra_dwh_report_Database=(String) context.getProperty("pgsql_hijra_dwh_report_Database");
                        context.setContextType("pgsql_hijra_dwh_report_Login", "id_String");
                            context.pgsql_hijra_dwh_report_Login=(String) context.getProperty("pgsql_hijra_dwh_report_Login");
                        context.setContextType("pgsql_hijra_dwh_report_Password", "id_Password");
                            String pwd_pgsql_hijra_dwh_report_Password_value = context.getProperty("pgsql_hijra_dwh_report_Password");
                            context.pgsql_hijra_dwh_report_Password = null;
                            if(pwd_pgsql_hijra_dwh_report_Password_value!=null) {
                                if(context_param.containsKey("pgsql_hijra_dwh_report_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.pgsql_hijra_dwh_report_Password = pwd_pgsql_hijra_dwh_report_Password_value;
                                } else if (!pwd_pgsql_hijra_dwh_report_Password_value.isEmpty()) {
                                    try {
                                        context.pgsql_hijra_dwh_report_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_pgsql_hijra_dwh_report_Password_value);
                                        context.put("pgsql_hijra_dwh_report_Password",context.pgsql_hijra_dwh_report_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("pgsql_hijra_dwh_report_Port", "id_String");
                            context.pgsql_hijra_dwh_report_Port=(String) context.getProperty("pgsql_hijra_dwh_report_Port");
                        context.setContextType("pgsql_hijra_dwh_report_Schema", "id_String");
                            context.pgsql_hijra_dwh_report_Schema=(String) context.getProperty("pgsql_hijra_dwh_report_Schema");
                        context.setContextType("pgsql_hijra_dwh_report_Server", "id_String");
                            context.pgsql_hijra_dwh_report_Server=(String) context.getProperty("pgsql_hijra_dwh_report_Server");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("pgsql_hijra_dwh_AdditionalParams")) {
                context.pgsql_hijra_dwh_AdditionalParams = (String) parentContextMap.get("pgsql_hijra_dwh_AdditionalParams");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_Database")) {
                context.pgsql_hijra_dwh_Database = (String) parentContextMap.get("pgsql_hijra_dwh_Database");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_Login")) {
                context.pgsql_hijra_dwh_Login = (String) parentContextMap.get("pgsql_hijra_dwh_Login");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_Password")) {
                context.pgsql_hijra_dwh_Password = (java.lang.String) parentContextMap.get("pgsql_hijra_dwh_Password");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_Port")) {
                context.pgsql_hijra_dwh_Port = (String) parentContextMap.get("pgsql_hijra_dwh_Port");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_Schema")) {
                context.pgsql_hijra_dwh_Schema = (String) parentContextMap.get("pgsql_hijra_dwh_Schema");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_Server")) {
                context.pgsql_hijra_dwh_Server = (String) parentContextMap.get("pgsql_hijra_dwh_Server");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_report_AdditionalParams")) {
                context.pgsql_hijra_dwh_report_AdditionalParams = (String) parentContextMap.get("pgsql_hijra_dwh_report_AdditionalParams");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_report_Database")) {
                context.pgsql_hijra_dwh_report_Database = (String) parentContextMap.get("pgsql_hijra_dwh_report_Database");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_report_Login")) {
                context.pgsql_hijra_dwh_report_Login = (String) parentContextMap.get("pgsql_hijra_dwh_report_Login");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_report_Password")) {
                context.pgsql_hijra_dwh_report_Password = (java.lang.String) parentContextMap.get("pgsql_hijra_dwh_report_Password");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_report_Port")) {
                context.pgsql_hijra_dwh_report_Port = (String) parentContextMap.get("pgsql_hijra_dwh_report_Port");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_report_Schema")) {
                context.pgsql_hijra_dwh_report_Schema = (String) parentContextMap.get("pgsql_hijra_dwh_report_Schema");
            }if (parentContextMap.containsKey("pgsql_hijra_dwh_report_Server")) {
                context.pgsql_hijra_dwh_report_Server = (String) parentContextMap.get("pgsql_hijra_dwh_report_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("pgsql_hijra_dwh_Password");
			parametersToEncrypt.add("pgsql_hijra_dwh_report_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : LBB_KC2200");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     118547 characters generated by Talend Open Studio for ESB 
 *     on the June 21, 2021 9:03:59 AM ICT
 ************************************************************************************************/